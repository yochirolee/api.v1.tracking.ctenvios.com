generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  phone     String? @unique
  password  String
  name      String
  role      Roles   
  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @updatedAt @db.Timestamptz()
  createdBy User? @relation("UserCreator", fields: [createdById], references: [id])
  createdById String?
  isActive Boolean @default(true)
  lastLogin DateTime? @db.Timestamptz()
  agencyId  Int
  agency Agency @relation(fields: [agencyId], references: [id])
  shipments Shipment[]
  events ShipmentEvent[]
  issues Issues[] @relation("IssueCreator")
  comments IssueComments[]
  refreshToken String? //how to handle this?
  resolvedIssues Issues[] @relation("IssueResolver")
  users User[] @relation("UserCreator")
  carrierId Int?
  carrier Carrier? @relation(fields: [carrierId], references: [id])

  @@index([email])
}

model Agency {
  id Int @id @default(autoincrement())
  name String
  shipments Shipment[]
  users User[]
  carriers Carrier[]
}

model Carrier {
  id Int @id @default(autoincrement())
  name String
  shipments Shipment[]
  users User[]
  agencies Agency[]
}



enum Roles {
  ROOT
  ADMINISTRATOR
  AGENCY_ADMIN
  MESSENGER
  SALES
  CARRIER_MESSENGER
  CARRIER_ADMIN
  CARRIER_WAREHOUSE_MANAGER
  CARRIER_WAREHOUSE_WORKER
  WAREHOUSE_MANAGER
  WAREHOUSE_WORKER
  AGENT
}

model Shipment {
  hbl String @unique @id
  invoiceId Int?
  locationId Int
  location Location @relation(fields: [locationId], references: [id])
  status ShipmentStatus @default(CREATED)
  container Container? @relation(fields: [containerId], references: [id])
  sender String?
  receiver String?
  description String?
  state String?
  city String?
  containerId Int?
  agencyId Int?
  agency Agency? @relation(fields: [agencyId], references: [id])
  events ShipmentEvent[]
  issues Issues[]
  carrierId Int?
  carrier Carrier? @relation(fields: [carrierId], references: [id])
  updateMethod UpdateMethod @default(SYSTEM)
  userId String
  user User @relation(fields: [userId], references: [id])
  timestamp DateTime @default(now()) @db.Timestamptz()
  @@index([hbl])
  
}

model ShipmentEvent {
  id Int @id @default(autoincrement())
  hbl String
  shipment Shipment @relation(fields: [hbl], references: [hbl])
  locationId Int
  location Location @relation(fields: [locationId], references: [id])
  status ShipmentStatus
  timestamp DateTime
  description String
  updateMethod UpdateMethod @default(SYSTEM)
  userId String
  user User @relation(fields: [userId], references: [id])
  @@index([hbl, locationId, status])
  @@unique([hbl, locationId, status])
}

enum UpdateMethod {
  SYSTEM
  EXCEL_FILE
  SCANNER
  
}


model Issues {
  id Int @id @default(autoincrement())
  hbl String
  shipment Shipment @relation(fields: [hbl], references: [hbl])
  description String
  type IssueType
  resolved Boolean @default(false)
  resolvedBy User? @relation("IssueResolver", fields: [resolvedById], references: [id])
  resolvedById String?  
  resolvedAt DateTime?
  comments IssueComments[]
  imageUrl String?
  userId String
  user User @relation("IssueCreator", fields: [userId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model IssueComments {
  id Int @id @default(autoincrement())
  issueId Int
  issue Issues @relation(fields: [issueId], references: [id])
  comment String
  imageUrl String?
  userId String
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

enum IssueType {
  DAMAGE
  DELAY
  INCORRECT_LABEL
  LOST
  OTHER


}
model Location {
  id Int @id @default(autoincrement())
  name String
  description String?
  address String?
  events ShipmentEvent[]
  shipments Shipment[]
}
enum ShipmentStatus {
  CREATED
  DISPATCH
  IN_PORT
  IN_CONTAINER
  IN_TRANSIT
  CUSTOMS_CLEARANCE
  RECEIVED_AT_WAREHOUSE
  READY_FOR_DELIVERY
  RECEIVED_BY_MESSENGER
  DELIVERED
  LOST
  RETURNED
  CLAIMED
  UNKNOWN
  IN_PALLET

}

model Container {
  id Int @id 
  shipments Shipment[]
  containerNumber String
  status ContainerStatus @default(IN_PORT)
  is_active Boolean @default(false)
}

enum ContainerStatus {
  IN_PORT
  UNGROUPED
 
}



