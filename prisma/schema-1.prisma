generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Parcel {
  hbl String @unique
  containerId Int?
  invoiceId Int
  agencyId Int ?
  events Event[]
  issues Issue[]

}

model Event {
  id           Int          @id @default(autoincrement())
  hbl          String
  parcel       Parcel       @relation(fields: [hbl], references: [hbl], onDelete: Cascade, onUpdate: Cascade)
  locationId   Int
  location     Location     @relation(fields: [locationId], references: [id])
  statusId     Int
  status       Status       @relation(fields: [statusId], references: [id])
  updatedAt    DateTime     @db.Timestamptz()
  updateMethod UpdateMethod @default(SYSTEM)
  userId       String
  user         User         @relation(fields: [userId], references: [id])
 
  @@unique([hbl,statusId,locationId])
  
}

model Status {
  id Int @id @default(autoincrement())
  status String @unique
  description String?
  events Event[]
}



model Issue {
  id          Int         @id @default(autoincrement())
  hbl         String
  parcel      Parcel      @relation(fields: [hbl], references: [hbl], onDelete: Cascade, onUpdate: Cascade)
  reason String
  createdAt   DateTime    @default(now()) @db.Timestamptz()
  resolvedAt  DateTime?   @db.Timestamptz()
  comments    Comment[]
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  photoUrl    String?
  status IssueStatus @default(OPEN)
  locationId Int
  location Location @relation(fields: [locationId], references: [id])

  @@index([hbl])
}

model Comment {
  id        Int   @id @default(autoincrement())
  issueId   Int
  issue     Issue    @relation(fields: [issueId], references: [id])
  comment   String
  createdAt DateTime @default(now()) @db.Timestamptz()
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  photoUrl  String?

  @@index([issueId])
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String?
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    Int
  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @updatedAt @db.Timestamptz()
  isActive Boolean @default(true)
  lastLogin DateTime? @db.Timestamptz()
  agencyId  Int
  events    Event[]
  issues    Issue[]
  comments  Comment[]
  refreshToken String?

  @@index([email])
}

model Location {
  id          Int      @id
  name        String   @unique
  description String?
  events      Event[]
  issues      Issue[]
}



model Role {
  id Int @id @default(autoincrement())
  role String @unique
  name String @unique
  users User[]
  permissions Permission[]

}

model Permission {
  id Int @id @default(autoincrement())
  permission String @unique
  roleId Int
  role Role @relation(fields: [roleId], references: [id])
}


enum IssueStatus {
  OPEN
  CLOSED
}

enum UpdateMethod {
  SCANNED
  MANUAL
  SYSTEM
  EXCEL_FILE
}





model error_log {
  id        Int   @id @default(autoincrement())
  timestamp DateTime @default(now()) @db.Timestamptz()
  level     String
  message   String
  stack     String?
  path      String?
  method    String?
}






